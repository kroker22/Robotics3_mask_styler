
new_mask_styler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d68  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0a  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000812  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00002284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051c  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000393  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	4c c0       	rjmp	.+152    	; 0x144 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:


int main(void)
{
	
	setup_pin();
  ae:	0e d0       	rcall	.+28     	; 0xcc <setup_pin>
	ADC_INIT();
  b0:	09 d0       	rcall	.+18     	; 0xc4 <ADC_INIT>
	UART1_initialize_polling();
  b2:	3a d0       	rcall	.+116    	; 0x128 <UART1_initialize_polling>
	setup_pwm_1();
  b4:	19 d0       	rcall	.+50     	; 0xe8 <setup_pwm_1>
  b6:	34 d0       	rcall	.+104    	; 0x120 <setup_pwm_2>
	setup_pwm_2();
  b8:	78 94       	sei
  ba:	80 e4       	ldi	r24, 0x40	; 64
	
	sei();
  bc:	9f e1       	ldi	r25, 0x1F	; 31
    /* Replace with your application code */
    while (1) 
    {
		
		OCR1A = 8000;
  be:	9b bd       	out	0x2b, r25	; 43
  c0:	8a bd       	out	0x2a, r24	; 42
  c2:	fb cf       	rjmp	.-10     	; 0xba <main+0xc>

000000c4 <ADC_INIT>:
#include <avr/io.h>
#include <avr/interrupt.h>

void ADC_INIT()
{
	ADMUX = 0x00;
  c4:	17 b8       	out	0x07, r1	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1<< ADPS1) | (1 << ADPS0);
  c6:	87 e8       	ldi	r24, 0x87	; 135
  c8:	86 b9       	out	0x06, r24	; 6
  ca:	08 95       	ret

000000cc <setup_pin>:
﻿#include "setup_motor.h"
#include <avr/io.h>

void setup_pin()
{
	DDRA = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; 
  d0:	1b ba       	out	0x1b, r1	; 27
	// led 설정 핀으로 모터 작동이나 각종 동작에의해 if문을 걸어서 디버깅용으로 사용 
	
	DDRB = 0xff;
  d2:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00001111;
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	98 bb       	out	0x18, r25	; 24
	//OC1A, OC1B --> PB5, PB6
	//OC0, OC2 --> PB4, PB7
	DDRE = 0b00011000;
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	92 b9       	out	0x02, r25	; 2
	PORTE = 0x00;
  dc:	13 b8       	out	0x03, r1	; 3
	
	DDRD = 0xff;
  de:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00; // switch 
  e0:	12 ba       	out	0x12, r1	; 18
	
	
	DDRF = 0x00;// ADC PIN setup
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  e6:	08 95       	ret

000000e8 <setup_pwm_1>:
}


 void setup_pwm_1()// 자동문 제어주기 1초
{
	TCCR1A = (1 << COM1A0) | (0 << COM1A1) | (1 << WGM11) | (1 << WGM10);
  e8:	83 e4       	ldi	r24, 0x43	; 67
  ea:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
  ec:	8a e1       	ldi	r24, 0x1A	; 26
  ee:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
  f0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	TCCR3A = (1 << COM3A0) | (0 << COM3A1) | (1 << WGM31) | (1 << WGM32);
  f4:	9a e4       	ldi	r25, 0x4A	; 74
  f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (0 << CS32) | ( 1 << CS31) | (0 << CS30);
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
  fe:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	
	TCNT1 = 0;
 102:	1d bc       	out	0x2d, r1	; 45
 104:	1c bc       	out	0x2c, r1	; 44
	TCNT3 = 0;
 106:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = 2047; // 976.6hz == 대충 1초
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	97 e0       	ldi	r25, 0x07	; 7
 112:	97 bd       	out	0x27, r25	; 39
 114:	86 bd       	out	0x26, r24	; 38
	ICR3 = 2047;
 116:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 11a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 11e:	08 95       	ret

00000120 <setup_pwm_2>:
}


 void setup_pwm_2() // fan제어주기 1초
{
	TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (0 << COM00) | (1 << CS02) | (1 << CS01) | (0 << CS00);
 120:	8e e6       	ldi	r24, 0x6E	; 110
 122:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 124:	12 be       	out	0x32, r1	; 50
 126:	08 95       	ret

00000128 <UART1_initialize_polling>:
static unsigned char save_data[15] = {0};
	
	
void UART1_initialize_polling(void)
{
	UCSR1A = 0x00;
 128:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	//비동기, parity 0, 8bit, 1stopbit
	
	//baud rate
	UBRR1H = 0x00;
 138:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
 13c:	87 e6       	ldi	r24, 0x67	; 103
 13e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
